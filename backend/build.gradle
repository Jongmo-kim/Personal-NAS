plugins {
	id 'org.springframework.boot' version '2.7.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.github.node-gradle.node" version "3.1.1"
	id 'jacoco'
	id 'java'
	id 'war'
}

node {
	version = '14.15.4'
	npmVersion = '6.14.4'
	workDir = file('../frontend')
	npmWorkDir = file('../frontend')
	nodeModulesDir = file('../frontend')
}

task deleteVueArtifact(type: Delete) {
    delete "src/main/resources/static"
}

//npm install
task frontNpmInstall(type: NpmTask) {
    workingDir = file("${project.projectDir}/../frontend")
    args = ['install']
}

//npm run build
task npmBuild(type: NpmTask, dependsOn: ['deleteVueArtifact', 'frontNpmInstall']) {
    workingDir = file("${project.projectDir}/../frontend")
    args = ['run', 'build']
}

group = 'com.jongmokim.personalnas'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
	dependsOn test
    reports {
		html.enabled true
        xml.enabled true
        csv.enabled true
        
		html.destination file("build/jacoco/jacoco.html")
        xml.destination file("build/jacoco/jacoco.xml")
    }
	afterEvaluate {
		
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [
						'**/ServletInitializer*',
						'**/PersonalnasApplication*',
					])
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
			element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 1.00
            }

			excludes = [
				'**.ServletInitializer*',
				'**.PersonalnasApplication*',
			]
        }
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.1'

	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}
